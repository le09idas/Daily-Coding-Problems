Daily Coding Problem for May 31 2019

This problem was asked by Facebook.

Given an array of numbers representing
the stock prices of a company in chronological
order and an integer k, return the maximum profit
you can make from k buys and sells. You must
buy the stock before you can sell it, and you
must sell the stock before you can buy again.

For example, given k=2 and the array [5, 2, 4, 0, 1],
you should return 3.

Given:
Forcast of stock price changes
Number of Buys/Sells to make

Initial thought:
We could do a keymap/linked list of each increase,
order by magnitude of increase, then, when the 
forcast is traversed, pick out the greatest increases.

Something to consider is that an interval of increase
can span more than two items in a list (it could be the whole list);
we have to keep track of when the interval ends and the magnitude. 
We also need to consider static periods where we have consecutive items
which are the same value.